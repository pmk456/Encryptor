from abc import ABC, abstractmethod


class EncBP(ABC):
    @abstractmethod
    def __init__(self): ...
    def encrypt(self, message: str) -> bytes: ...
    def decrypt(self, data: bytes) -> str: ...
    def file_encrypt(self, path: str, return_data: bool = False) -> bytes: ...
    def file_decrypt(self, path: str, return_data: bool = False) -> bytes: ...
    def sign(self, data: bytes, algo: str = "SHA-1") -> bytes: ...
    def verify_signature(self, data: bytes, signature_data: bytes) -> tuple: ...
    def sign_file(self, path: str, algo: str = "SHA-1") -> bytes: ...
    def verify_file(self, path: str, signature_data: bytes) -> tuple: ...

    @staticmethod
    def __pad(data: str) -> bytes: ...

    @staticmethod
    def __file_pad(bin_data: bytes) -> bytes: ...

    @classmethod
    def generate_keys(cls): ...
